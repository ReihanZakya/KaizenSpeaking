Index: app/src/main/java/com/example/kaizenspeaking/ui/home_signed/HomeSignedFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kaizenspeaking.ui.home_signed\r\n\r\nimport android.app.Dialog\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.Window\r\nimport android.widget.Button\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.kaizenspeaking.R\r\nimport com.example.kaizenspeaking.databinding.FragmentHomeSignedBinding\r\nimport com.example.kaizenspeaking.ui.auth.SignInActivity\r\nimport com.example.kaizenspeaking.ui.history.HistoryViewModel\r\nimport com.example.kaizenspeaking.ui.history.HistoryViewModelFactory\r\nimport com.example.kaizenspeaking.ui.history.data.Authenticator\r\nimport com.example.kaizenspeaking.ui.history.data.remote.Repository\r\nimport com.example.kaizenspeaking.ui.history.data.remote.retrofit.ApiConfig\r\nimport com.example.kaizenspeaking.ui.home.Article\r\nimport com.example.kaizenspeaking.ui.home.ArticleAdapter\r\nimport com.example.kaizenspeaking.utils.UserSession\r\nimport com.github.mikephil.charting.charts.LineChart\r\nimport com.github.mikephil.charting.data.LineData\r\nimport com.github.mikephil.charting.data.LineDataSet\r\nimport kotlin.getValue\r\n\r\nclass HomeSignedFragment : Fragment() {\r\n    private val repository: Repository by lazy {\r\n        Repository.getInstance(ApiConfig.getApiService())\r\n    }\r\n    private val historyViewModel: HistoryViewModel by viewModels {\r\n        HistoryViewModelFactory(repository)\r\n    }\r\n\r\n    private var _binding: FragmentHomeSignedBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    private lateinit var homeSignedViewModel: HomeSignedViewModel\r\n    private lateinit var lineChart: LineChart\r\n    private val articleAdapter by lazy { ArticleAdapter(requireContext(), listOf()) }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        homeSignedViewModel = ViewModelProvider(this)[HomeSignedViewModel::class.java]\r\n        _binding = FragmentHomeSignedBinding.inflate(inflater, container, false)\r\n\r\n        lineChart = binding.lineChart\r\n        observeChartData()\r\n\r\n\r\n        binding.accountButton.setOnClickListener {\r\n            if (!UserSession.isLoggedIn(requireContext())) {\r\n                showLoginDialog()\r\n            } else {\r\n                findNavController().navigate(R.id.action_homeSignedFragment_to_profileFragment) } }\r\n\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        setupRecyclerView()\r\n\r\n        updateProgressChartVisibility()\r\n\r\n        // Observer untuk isLoading\r\n        historyViewModel.isLoading.observe(viewLifecycleOwner, { isLoading ->\r\n            if (isLoading) {\r\n                binding.loadingLayout.visibility = View.VISIBLE\r\n                binding.progressChartLayout.visibility = View.INVISIBLE\r\n            } else {\r\n                binding.loadingLayout.visibility = View.GONE\r\n                binding.progressChartLayout.visibility = View.VISIBLE\r\n            }\r\n        })\r\n        historyViewModel.getAllHistory(Authenticator.getToken(requireContext()) ?: \"\", Authenticator.getUserId(requireContext()) ?: \"\")\r\n        historyViewModel.numberOfExercise.observe(viewLifecycleOwner, { newText ->\r\n            binding.numberOfExerciseText.text = newText\r\n        })\r\n\r\n        binding.switchToSimple.setOnCheckedChangeListener { _, isChecked ->\r\n            if (isChecked) {\r\n                historyViewModel.entriesA.observe(viewLifecycleOwner, { entriesA ->\r\n                    historyViewModel.entriesB.observe(viewLifecycleOwner, { entriesB ->\r\n                        historyViewModel.entriesC.observe(viewLifecycleOwner, { entriesC ->\r\n                            historyViewModel.entriesD.observe(viewLifecycleOwner, { entriesD ->\r\n                                val averageEntries = calculateAverageEntries(entriesA, entriesB, entriesC, entriesD)\r\n                                val averageDataSet = LineDataSet(averageEntries, \"Nilai Rata-Rata\").apply {\r\n                                    color = resources.getColor(android.R.color.holo_purple)\r\n                                }\r\n                                val lineData = LineData(averageDataSet)\r\n                                setupChart(lineData)\r\n                            })\r\n                        })\r\n                    })\r\n                })\r\n            } else {\r\n                observeChartData() // Kembali ke grafik awal\r\n            }\r\n        }\r\n\r\n        // Set onClickListener for profile\r\n        binding.accountButton.setOnClickListener {\r\n            val navController = findNavController()\r\n            navController.navigate(R.id.navigation_profile) // Navigasi ke HomeSignedFragment\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private fun setupRecyclerView() {\r\n        binding.ArticlesRecyclerView.apply {\r\n            layoutManager = LinearLayoutManager(requireContext())\r\n            adapter = articleAdapter\r\n        }\r\n        updateArticles()\r\n    }\r\n\r\n    private fun updateArticles() {\r\n        val articles = List(homeSignedViewModel.articleTitles.size) { index ->\r\n            Article(\r\n                title = homeSignedViewModel.articleTitles[index],\r\n                description = homeSignedViewModel.articleDescriptions[index],\r\n                image = homeSignedViewModel.articleImages[index],\r\n                url = homeSignedViewModel.articleUrls[index]\r\n            )\r\n        }\r\n        articleAdapter.updateData(articles)\r\n    }\r\n\r\n    private fun observeChartData() {\r\n        historyViewModel.entriesA.observe(viewLifecycleOwner, { entriesA ->\r\n            val dataSetA = LineDataSet(entriesA, \"Kejelasan\").apply {\r\n                color = resources.getColor(android.R.color.holo_blue_light)\r\n            }\r\n            historyViewModel.entriesB.observe(viewLifecycleOwner, { entriesB ->\r\n                val dataSetB = LineDataSet(entriesB, \"Diksi\").apply {\r\n                    color = resources.getColor(android.R.color.holo_green_light)\r\n                }\r\n                historyViewModel.entriesC.observe(viewLifecycleOwner, { entriesC ->\r\n                    val dataSetC = LineDataSet(entriesC, \"Kelancaran\").apply {\r\n                        color = resources.getColor(android.R.color.holo_red_light)\r\n                    }\r\n                    historyViewModel.entriesD.observe(viewLifecycleOwner, { entriesD ->\r\n                        val dataSetD = LineDataSet(entriesD, \"Emosi\").apply {\r\n                            color = resources.getColor(android.R.color.holo_orange_light)\r\n                        }\r\n                        val lineData = LineData(dataSetA, dataSetB, dataSetC, dataSetD)\r\n                        setupChart(lineData)\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    private fun calculateAverageEntries(\r\n        entriesA: List<com.github.mikephil.charting.data.Entry>,\r\n        entriesB: List<com.github.mikephil.charting.data.Entry>,\r\n        entriesC: List<com.github.mikephil.charting.data.Entry>,\r\n        entriesD: List<com.github.mikephil.charting.data.Entry>\r\n    ): List<com.github.mikephil.charting.data.Entry> {\r\n        val averageEntries = mutableListOf<com.github.mikephil.charting.data.Entry>()\r\n\r\n        for (i in entriesA.indices) {\r\n            val avg = (entriesA[i].y + entriesB[i].y + entriesC[i].y + entriesD[i].y) / 4\r\n            averageEntries.add(com.github.mikephil.charting.data.Entry(entriesA[i].x, avg))\r\n        }\r\n        return averageEntries\r\n    }\r\n\r\n\r\n    private fun setupChart(lineData: LineData) {\r\n        lineChart.data = lineData\r\n\r\n        val xAxis = lineChart.xAxis\r\n        xAxis.position = com.github.mikephil.charting.components.XAxis.XAxisPosition.BOTTOM\r\n        xAxis.granularity = 1f\r\n\r\n//        lineChart.axisLeft.axisMinimum = 0f\r\n//        lineChart.axisLeft.axisMaximum = 100f\r\n        lineChart.axisRight.isEnabled = false\r\n        lineChart.description.text = \"Latihan Ke: \"\r\n        lineChart.invalidate()\r\n    }\r\n\r\n    private fun showLoginDialog() {\r\n        val dialog = Dialog(requireContext())\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n        dialog.setCancelable(false)\r\n        dialog.setContentView(R.layout.dialog_box_login)\r\n        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n\r\n        val signInButton: Button = dialog.findViewById(R.id.btnSignIn)\r\n        val googleSignInButton: Button = dialog.findViewById(R.id.btnClose)\r\n\r\n        signInButton.setOnClickListener {\r\n            startActivity(Intent(requireContext(), SignInActivity::class.java))\r\n            dialog.dismiss()\r\n        }\r\n\r\n        googleSignInButton.setOnClickListener {\r\n            // TODO: Implement Google Sign-In logic\r\n            // Use Google Sign-In API to handle authentication\r\n            dialog.dismiss()\r\n        }\r\n\r\n        dialog.show()\r\n    }\r\n\r\n    private fun updateProgressChartVisibility(){\r\n        if(UserSession.isLoggedIn(requireContext())){\r\n            binding.progressChartLayout.visibility = View.VISIBLE\r\n            binding.chartHistory.visibility = View.VISIBLE\r\n            binding.opening.visibility = View.GONE\r\n        }else{\r\n            binding.progressChartLayout.visibility = View.GONE\r\n            binding.chartHistory.visibility = View.GONE\r\n            binding.opening.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kaizenspeaking/ui/home_signed/HomeSignedFragment.kt b/app/src/main/java/com/example/kaizenspeaking/ui/home_signed/HomeSignedFragment.kt
--- a/app/src/main/java/com/example/kaizenspeaking/ui/home_signed/HomeSignedFragment.kt	(revision 73d6b14559c82e152f4c946e7f3b543d187f9063)
+++ b/app/src/main/java/com/example/kaizenspeaking/ui/home_signed/HomeSignedFragment.kt	(date 1733074681949)
@@ -10,6 +10,7 @@
 import android.view.ViewGroup
 import android.view.Window
 import android.widget.Button
+import androidx.appcompat.app.AppCompatActivity
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.viewModels
 import androidx.lifecycle.ViewModelProvider
@@ -50,6 +51,7 @@
         inflater: LayoutInflater, container: ViewGroup?,
         savedInstanceState: Bundle?
     ): View {
+        (requireActivity() as AppCompatActivity).supportActionBar?.hide()
         homeSignedViewModel = ViewModelProvider(this)[HomeSignedViewModel::class.java]
         _binding = FragmentHomeSignedBinding.inflate(inflater, container, false)
 
